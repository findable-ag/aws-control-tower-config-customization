AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template to update config recorder settings in child accounts created by ControlTower.'
Parameters:

  ExcludedAccounts:
    Description: Excluded Accounts list. This list should contain Management account, Log Archive and Audit accounts at the minimum
    Default: "['305497534492', '313101040085', '627614371000']"
    MaxLength: '2000'
    MinLength: '36'
    Type: String

  ConfigRecorderResourceTypes:
    Description: List of all Config Recorder resource types to disable recording on
    Default: "AWS::EC2::EIP,AWS::EC2::Instance,AWS::EC2::InternetGateway,AWS::EC2::NetworkAcl,AWS::EC2::NetworkInterface,AWS::EC2::RouteTable,AWS::EC2::SecurityGroup,AWS::EC2::Subnet,AWS::EC2::VPC,AWS::EC2::VPCEndpoint,AWS::EC2::Volume,AWS::ECS::Service,AWS::ECS::TaskDefinition,AWS::ECS::TaskSet"
    Type: String

  CloudFormationVersion:
    Type: String
    Default: 1

Resources:
    LambdaZipsBucket:
      Type: AWS::S3::Bucket
      Properties:
          BucketEncryption:
            ServerSideEncryptionConfiguration:
              - ServerSideEncryptionByDefault:
                  SSEAlgorithm: AES256

    ProducerLambda:
        Type: AWS::Lambda::Function
        DeletionPolicy: Retain
        Properties:
            #FunctionName: ct_configrecorder_override_producer_cf
            Code:
                S3Bucket: !Ref LambdaZipsBucket
                S3Key: ct-blogs-content/ct_configrecorder_override_producer.zip
            Handler: ct_configrecorder_override_producer.lambda_handler
            Role: !GetAtt ProducerLambdaExecutionRole.Arn
            Runtime: python3.9
            MemorySize: 128
            Timeout: 300
            Architectures:
                - x86_64
            ReservedConcurrentExecutions: 1
            Environment:
                Variables:
                    EXCLUDED_ACCOUNTS: !Ref ExcludedAccounts
                    LOG_LEVEL: INFO
                    SQS_URL: !Ref SQSConfigRecorder

    ProducerLambdaPermissions:                
      Type: AWS::Lambda::Permission
      DeletionPolicy: Retain
      Properties: 
        Action: 'lambda:InvokeFunction'
        FunctionName: !Ref ProducerLambda
        Principal: 'events.amazonaws.com'
        SourceArn: !GetAtt ProducerEventTrigger.Arn             
      
    ConsumerLambda:
        Type: AWS::Lambda::Function
        DeletionPolicy: Retain
        Properties:
            #FunctionName: ct_configrecorder_override_consumer_cf
            Code:
                ZipFile: |
                  import boto3
                  import json
                  import os
                  import logging

                  def lambda_handler(event, context):

                      LOG_LEVEL = os.getenv('LOG_LEVEL')
                      logging.getLogger().setLevel(LOG_LEVEL)

                      try:

                          logging.info('Event Data:')
                          logging.info(event)

                          body = json.loads(event['Records'][0]['body'])
                          account_id = body['Account']
                          aws_region = body['Region']
                          event = body['Event']

                          logging.info(f'Extracted Account: {account_id}')
                          logging.info(f'Extracted Region: {aws_region}')
                          logging.info(f'Extracted Event: {event}')

                          STS = boto3.client("sts")

                          def assume_role(account_id, role='AWSControlTowerExecution'):
                              '''
                              Return a session in the target account using Control Tower Role
                              '''
                              try:
                                  curr_account = STS.get_caller_identity()['Account']
                                  if curr_account != account_id:
                                      part = STS.get_caller_identity()['Arn'].split(":")[1]

                                      role_arn = 'arn:' + part + ':iam::' + account_id + ':role/' + role
                                      ses_name = str(account_id + '-' + role)
                                      response = STS.assume_role(RoleArn=role_arn, RoleSessionName=ses_name)
                                      sts_session = boto3.Session(
                                          aws_access_key_id=response['Credentials']['AccessKeyId'],
                                          aws_secret_access_key=response['Credentials']['SecretAccessKey'],
                                          aws_session_token=response['Credentials']['SessionToken']   )

                                      return sts_session
                              except ClientError as exe:
                                  logging.error('Unable to assume role')
                                  raise exe


                          sts_session = assume_role(account_id)
                          logging.info(f'Printing STS session: {sts_session}')

                          #Lets use the session and create a client for configservice
                          configservice = sts_session.client('config',region_name=aws_region)

                          #lets describe for configguration recorder
                          configrecorder = configservice.describe_configuration_recorders()
                          logging.info(f'Existing Configuration Recorder :' ,configrecorder)

                          #ControlTower created configuration recorder with name "aws-controltower-BaselineConfigRecorder" and we will update just that
                          try:
                              role_arn = 'arn:aws:iam::' + account_id + ':role/aws-controltower-ConfigRecorderRole'
                              CONFIG_RECORDER_RESOURCE_STRING = os.getenv('CONFIG_RECORDER_RESOURCE_LIST')
                              CONFIG_RECORDER_RESOURCE_LIST = CONFIG_RECORDER_RESOURCE_STRING.split(',')

                              # Event = Delete is when stack is deleted, we rollback changed made and leave it as ControlTower Intended
                              if event == 'Delete':
                                  response = configservice.put_configuration_recorder(
                                  ConfigurationRecorder={
                                      'name': 'aws-controltower-BaselineConfigRecorder',
                                      'roleARN': role_arn,
                                      'recordingGroup': {
                                          'allSupported': True,
                                          'includeGlobalResourceTypes': False
                                      }
                                  })
                              else:
                                  response = configservice.put_configuration_recorder(
                                  ConfigurationRecorder={
                                      'name': 'aws-controltower-BaselineConfigRecorder',
                                      'roleARN': role_arn,
                                      'recordingGroup': {
                                          "allSupported": False,
                                          "exclusionByResourceTypes": {
                                              "resourceTypes": CONFIG_RECORDER_RESOURCE_LIST
                                          },
                                          "includeGlobalResourceTypes": False,
                                          "recordingStrategy": {
                                              "useOnly": "EXCLUSION_BY_RESOURCE_TYPES"
                                          },
                                      }
                                  })
                              logging.info(f'Response for put_configuration_recorder :{response} ')

                              #lets describe for configuration recorder after the update
                              configrecorder =  configservice.describe_configuration_recorders()
                              logging.info(f'Post Change Configuration recorder : {configrecorder}')

                          except:
                              logging.error('Unable to Update Config Recorder for Account and Region : ', account_id, aws_region)
                              configrecorder =  configservice.describe_configuration_recorders()
                              logging.info(f'Exception : {configrecorder}')
                              raise exe

                          return {
                              'statusCode': 200
                          }

                      except Exception as e:
                          exception_type = e.__class__.__name__
                          exception_message = str(e)
                          logging.exception(f'{exception_type}: {exception_message}')
            Handler: index.lambda_handler
            Role: !GetAtt ConsumerLambdaExecutionRole.Arn
            Runtime: python3.9
            MemorySize: 128
            Timeout: 180
            Architectures:
                - x86_64
            ReservedConcurrentExecutions: 10
            Environment:
                Variables:
                    LOG_LEVEL: INFO
                    CONFIG_RECORDER_RESOURCE_LIST: !Ref ConfigRecorderResourceTypes 
                    
    ConsumerLambdaEventSourceMapping:
        Type: AWS::Lambda::EventSourceMapping
        DeletionPolicy: Retain
        Properties:
          BatchSize: 1
          Enabled: true
          EventSourceArn: !GetAtt SQSConfigRecorder.Arn
          FunctionName: !GetAtt ConsumerLambda.Arn                
    
    ProducerLambdaExecutionRole:
        Type: 'AWS::IAM::Role'
        DeletionPolicy: Retain
        Properties:
          ManagedPolicyArns:
            - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action:
                  - 'sts:AssumeRole'
          Path: /         
          Policies:
            - PolicyName: ct_cro_producer
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - cloudformation:ListStackInstances
                    Resource: !Sub 'arn:${AWS::Partition}:cloudformation:*:*:stackset/AWSControlTowerBP-BASELINE-CONFIG:*'
                  - Effect: Allow
                    Action:
                      - sqs:DeleteMessage
                      - sqs:ReceiveMessage
                      - sqs:SendMessage
                      - sqs:GetQueueAttributes
                    Resource: !GetAtt SQSConfigRecorder.Arn  
                    
    ConsumerLambdaExecutionRole:
        Type: 'AWS::IAM::Role'
        DeletionPolicy: Retain
        Properties:
          ManagedPolicyArns:
            - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action:
                  - 'sts:AssumeRole'
          Path: /         
          Policies:
            - PolicyName: policy-sts-all
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - sts:AssumeRole
                    Resource: "*"
                  - Effect: Allow
                    Action:
                      - sqs:DeleteMessage
                      - sqs:ReceiveMessage
                      - sqs:SendMessage
                      - sqs:GetQueueAttributes
                    Resource: !GetAtt SQSConfigRecorder.Arn   

    SQSConfigRecorder:
        Type: AWS::SQS::Queue
        DeletionPolicy: Retain
        Properties:
            #QueueName: ct_configrecorder_override_cf
            VisibilityTimeout: 180
            DelaySeconds: 5
            KmsMasterKeyId: alias/aws/sqs

    ProducerEventTrigger:
        Type: AWS::Events::Rule
        Properties: 
          Description: "Rule to trigger config recorder override producer lambda"
          EventBusName: default
          EventPattern: '{
                          "source": ["aws.controltower"],
                          "detail-type": ["AWS Service Event via CloudTrail"],
                          "detail": {
                            "eventName": ["UpdateLandingZone", "CreateManagedAccount", "UpdateManagedAccount"]
                          }
                        }'
          Name: ct_config_recorder_override
          State: ENABLED
          Targets: 
            - 
                Arn: 
                  Fn::GetAtt: 
                    - "ProducerLambda"
                    - "Arn"
                Id: "ProducerTarget"

    ProducerLambdaTrigger:
      Type: 'Custom::ExecuteLambda'
      Properties:
        ServiceToken: !GetAtt "ProducerLambda.Arn"
        FunctionName: !Ref ProducerLambda
        Version: !Ref CloudFormationVersion

    CopyZips:
      Type: Custom::CopyZips
      Properties:
        ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
        DestBucket: !Ref 'LambdaZipsBucket'
        #update this to match AWS public bucket
        #s3://marketplace-sa-resources/ct-blogs-content/ct_configrecorder_override_consumer.zip
        #s3://marketplace-sa-resources/ct-blogs-content/ct_configrecorder_override_producer.zip
        SourceBucket: marketplace-sa-resources
        Prefix: ct-blogs-content/
        Objects:
          - 'ct_configrecorder_override_producer.zip'
          - 'ct_configrecorder_override_consumer.zip'

    CopyZipsRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        Path: /
        Policies:
          - PolicyName: lambda-copier
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:GetObjectTagging
                  Resource:
                    - !Sub 'arn:${AWS::Partition}:s3:::marketplace-sa-resources/ct-blogs-content/*'
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:DeleteObject
                    - s3:PutObjectTagging
                  Resource:
                    - !Sub 'arn:${AWS::Partition}:s3:::${LambdaZipsBucket}/ct-blogs-content/*'

    CopyZipsFunction:
      Type: AWS::Lambda::Function
      Properties:
        Description: Copies objects from the S3 bucket to a new location.
        Handler: index.handler
        Runtime: python3.7
        Role: !GetAtt 'CopyZipsRole.Arn'
        ReservedConcurrentExecutions: 1
        Timeout: 240
        Code:
          ZipFile: |
            import json
            import logging
            import threading
            import boto3
            import cfnresponse
            def copy_objects(source_bucket, dest_bucket, prefix, objects):
                s3 = boto3.client('s3')
                for o in objects:
                    key = prefix + o
                    copy_source = {
                        'Bucket': source_bucket,
                        'Key': key
                    }
                    print('copy_source: %s' % copy_source)
                    print('dest_bucket = %s'%dest_bucket)
                    print('key = %s' %key)
                    s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                          Key=key)
            def delete_objects(bucket, prefix, objects):
                s3 = boto3.client('s3')
                objects = {'Objects': [{'Key': prefix + o} for o in objects]}
                s3.delete_objects(Bucket=bucket, Delete=objects)
            def timeout(event, context):
                logging.error('Execution is about to time out, sending failure response to CloudFormation')
                cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
            def handler(event, context):
                # make sure we send a failure to CloudFormation if the function
                # is going to timeout
                timer = threading.Timer((context.get_remaining_time_in_millis()
                          / 1000.00) - 0.5, timeout, args=[event, context])
                timer.start()
                print('Received event: %s' % json.dumps(event))
                status = cfnresponse.SUCCESS
                try:
                    source_bucket = event['ResourceProperties']['SourceBucket']
                    dest_bucket = event['ResourceProperties']['DestBucket']
                    prefix = event['ResourceProperties']['Prefix']
                    objects = event['ResourceProperties']['Objects']
                    if event['RequestType'] == 'Delete':
                        delete_objects(dest_bucket, prefix, objects)
                    else:
                        copy_objects(source_bucket, dest_bucket, prefix, objects)
                except Exception as e:
                    logging.error('Exception: %s' % e, exc_info=True)
                    status = cfnresponse.FAILED
                finally:
                    timer.cancel()
                    cfnresponse.send(event, context, status, {}, None)